# List of all available rules: https://realm.github.io/SwiftLint/rule-directory.html

opt_in_rules:
  - accessibility_label_for_image
  - accessibility_trait_for_button
  - array_init
  - balanced_xctest_lifecycle
  - closure_end_indentation
  - closure_spacing
  - collection_alignment
  - comma_inheritance
  - contains_over_filter_count
  - contains_over_filter_is_empty
  - contains_over_first_not_nil
  - contains_over_range_nil_comparison
  - convenience_type
  - direct_return
  - discarded_notification_center_observer
  - discouraged_assert
  - discouraged_none_name
  - discouraged_object_literal
  - discouraged_optional_boolean
  - discouraged_optional_collection
  - empty_collection_literal
  - empty_count
  - empty_string
  - empty_xctest_method
  - enum_case_associated_values_count
  - expiring_todo
  - explicit_init
  - fallthrough
  - fatal_error_message
  - file_name
  - file_name_no_space
  - file_types_order
  - first_where
  - flatmap_over_map_reduce
  - force_unwrapping
  - function_default_parameter_at_end
  - ibinspectable_in_extension
  - identical_operands
  - implicit_return
  - implicitly_unwrapped_optional
  - indentation_width
  - joined_default_parameter
  - last_where
  - legacy_multiple
  - legacy_objc_type
  - let_var_whitespace
  - literal_expression_end_indentation
  - local_doc_comment
  - lower_acl_than_parent
  - modifier_order
  - multiline_arguments
  - multiline_arguments_brackets
  - multiline_function_chains
  - multiline_literal_brackets
  - multiline_parameters
  - multiline_parameters_brackets
  - nimble_operator
  - nslocalizedstring_key
  - nslocalizedstring_require_bundle
  - number_separator
  - operator_usage_whitespace
  - optional_enum_case_matching
  - overridden_super_call
  - override_in_extension
  - pattern_matching_keywords
  - period_spacing
  - prefer_self_type_over_type_of_self
  - prefer_zero_over_explicit_init
  - private_action
  - private_outlet
  - private_subject
  - prohibited_super_call
  - quick_discouraged_call
  - quick_discouraged_focused_test
  - quick_discouraged_pending_test
  - raw_value_for_camel_cased_codable_enum
  - reduce_into
  - redundant_nil_coalescing
  - redundant_type_annotation
  - required_enum_case
  - return_value_from_void_function
  - self_binding
  - shorthand_optional_binding
  - single_test_class
  - sorted_first_last
  - sorted_imports
  - static_operator
  - strong_iboutlet
  - switch_case_on_newline
  - test_case_accessibility
  - toggle_bool
  - trailing_closure
  - unavailable_function
  - unhandled_throwing_task
  - unneeded_parentheses_in_closure_argument
  - unowned_variable_capture
  - untyped_error_in_catch
  - vertical_parameter_alignment_on_call
  - vertical_whitespace_closing_braces
  - vertical_whitespace_opening_braces
  - weak_delegate
  - xct_specific_matcher
  - yoda_condition

disabled_rules:
  - anonymous_argument_in_multiline_closure
  - attributes
  - blanket_disable_command
  - closure_body_length
  - conditional_returns_on_newline
  - explicit_acl
  - explicit_enum_raw_value
  - explicit_top_level_acl
  - explicit_type_interface
  - extension_access_modifier
  - file_header
  - no_extension_access_modifier
  - no_magic_numbers
  - object_literal
  - prefer_nimble
  - prefer_self_type_over_type_of_self
  - prefixed_toplevel_constant
  - prohibited_interface_builder
  - required_deinit
  - sorted_enum_cases
  - strict_fileprivate
  - superfluous_else
  - type_contents_order
  - vertical_whitespace_between_cases

analyzer_rules:
  - capture_variable
  - explicit_self
  - typesafe_array_init
  - unused_declaration
  - unused_import

indentation: 4

identifier_name:
  min_length: 1
  max_length: 40

line_length:
  warning: 150
  error: 200

function_body_length:
  warning: 150
  error: 200

custom_rules:
  no_nsrect:
    regex: '\bNSRect\b'
    match_kinds: typeidentifier
    message: 'Use CGRect instead of NSRect'
  no_nssize:
    regex: '\bNSSize\b'
    match_kinds: typeidentifier
    message: 'Use CGSize instead of NSSize'
  no_nspoint:
    regex: '\bNSPoint\b'
    match_kinds: typeidentifier
    message: 'Use CGPoint instead of NSPoint'
  no_cgfloat:
    regex: '\bCGFloat\b'
    match_kinds: typeidentifier
    message: 'Use Double instead of CGFloat'
  no_cgfloat2:
    regex: '\bCGFloat\('
    message: 'Use Double instead of CGFloat'
  swiftui_state_private:
    regex: '@(State|EnvironmentObject)\s+var'
    message: 'SwiftUI @State/@EnvironmentObject properties should be private'
  swiftui_environment_private:
    regex: '@Environment\(\\\.\w+\)\s+var'
    message: 'SwiftUI @Environment properties should be private'
  final_class:
    regex: '^class [a-zA-Z\d]+[^{]+\{'
    message: 'Classes should be marked as final whenever possible. If you actually need it to be subclassable, just add `// swiftlint:disable:next final_class`.'
  no_alignment_center:
    regex: '\b\(alignment: .center\b'
    message: 'This alignment is the default.'
  already_true:
    regex: "== true"
    message: "Don't compare to true, just use the bool value."
  already_bool:
    regex: "== false"
    message: "Don't compare to false, just use !value."
  commented_code:
    regex: '^\h*\/\/[a-zA-Z@.}]|^\h*\/\/\h\h\h\h*[a-zA-Z@.}]'
    message: "Commented out code. Remember not to commit."
  no_fatal_errors:
    included: ".*.swift"
    name: "!!Crash!!"
    regex: "fatalError"
    message: "Don't use fatalError()"
    severity: error
  protocol_conformance:
    included: ".*.swift"
    name: "Protocol Conformance"
    message: "Protocol conformance should be declared in separate extensions in the same file"
    regex: "(class|struct|extension)[[:space:]]+(?i:(?![^d]*delegate:))[^'\"()<>{},!?:]+:([^'\"<>(){},!?:]+,)+[^'\"<>(){},!?:]*\\{"
    match_kinds:
      - keyword
    severity: warning
  dont_import_uikit:
    included: ".*(?i)(ViewModel|Model|DataSource).swift"
    name: "Don't import UIKit in ViewModel"
    regex: "^import (UIKit)$"
    message: "Don't import UIKit in ViewModel/ Model / DataSource"
    severity: error
  no_objcMembers:
    name: "@objcMembers"
    regex: "@objcMembers"
    message: "Explicitly use @objc on each member you want to expose to Objective-C"
    severity: error
  no_direct_standard_out_logs:
    name: "Writing log messages directly to standard out is disallowed"
    regex: "(\\bprint|\\bdebugPrint|\\bdump|Swift\\.print|Swift\\.debugPrint|Swift\\.dump)\\s*\\("
    match_kinds:
    - identifier
    message: "Don't commit `print(…)`, `debugPrint(…)`, or `dump(…)` as they write to standard out in release. Either log to a dedicated logging system or silence this warning in debug-only scenarios explicitly using `// swiftlint:disable:next no_direct_standard_out_logs`"
    severity: warning
  no_file_literal:
    name: "#file is disallowed"
    regex: "(\\b#file\\b)"
    match_kinds:
    - identifier
    message: "Instead of #file, use #fileID"
  no_filepath_literal:
    name: "#filePath is disallowed"
    regex: "(\\b#filePath\\b)"
    match_kinds:
    - identifier
    message: "Instead of #filePath, use #fileID."
